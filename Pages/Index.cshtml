@page
@model IndexModel

<!--
    NOTE: Ensure you have Bootstrap Icons referenced, for example:
    <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
-->

<style>
    /* Base styles for section cards */
    .section-card {
        cursor: pointer;
        transition: background-color 0.2s, box-shadow 0.2s;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .section-card:hover {
            filter: brightness(90%);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        /* Active state */
        .section-card.active {
            border: 2px solid #333;
        }

    /* Delete icon style */
    .delete-icon {
        cursor: pointer;
        transition: transform 0.2s;
    }

        .delete-icon:hover {
            transform: scale(1.1);
        }

    /* Add Section button icon */
    .add-section-btn i {
        margin-right: 5px;
    }

    /* Style for the read-only title in the top menu */
    .title-label {
        margin-right: 0.5rem;
    }

    /* Badge style for type label on the section card */
    .type-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    /* Editable title in the section container */
    .editable-title {
        cursor: pointer;
    }

        .editable-title:focus {
            outline: none;
            border-bottom: 1px dashed #000;
        }

    /* Style for the generated HTML container */
    #generatedHtmlContainer {
        text-align: center;
    }
</style>

<!-- Hidden input for saving data (used for AJAX or debugging) -->
<input type="hidden" name="SavedSections" id="SavedSections" />

<!-- Top menu: displays read-only title, type badge, and a delete icon -->
<div class="d-flex flex-wrap gap-2 mb-3" id="sectionsMenu"></div>

<!-- Container for section editing -->
<div id="sectionContainer" class="mb-3"></div>

<!-- Buttons for generating HTML and saving sections -->
<div class="mb-3">
    <button type="button" class="btn btn-secondary" onclick="generateHtml()">
        <i class="bi bi-code"></i> Generate HTML
    </button>
    <button type="button" class="btn btn-primary ms-2" onclick="saveSections()">
        <i class="bi bi-save"></i> Save Changes
    </button>
</div>

<h4>Generated HTML</h4>
<div id="generatedHtmlContainer" class="p-3 border"></div>

@section Scripts {
    <script>
        let sectionsData = [];
        let selectedSectionId = null;
        const defaultType = "psalmen"; // default section type

        // Load initial data from the server (if any).
        const initialData = @Html.Raw(Model.InitialDataJson ?? "[]");

        if (initialData.length > 0) {
            sectionsData = initialData;
            // If any section was previously used to generate HTML (green background),
            // select that section as active.
            const activeSection = sectionsData.find(sec => sec.htmlActive);
            if (activeSection) {
                selectedSectionId = activeSection.id;
            } else {
                const defaultSection = sectionsData.find(sec => sec.type === defaultType) || sectionsData[0];
                selectedSectionId = defaultSection.id;
            }
        } else {
            // Create default sections if none exist.
            sectionsData.push({
                id: generateId(),
                title: "Psalm bord",
                type: "psalmen",
                content: [""],
                htmlActive: false
            });
            sectionsData.push({
                id: generateId(),
                title: "Anders",
                type: "anders",
                content: "Enter text here...",
                htmlActive: false
            });
            selectedSectionId = sectionsData[0].id;
        }

        // Initial rendering
        renderMenu();
        renderSelectedSection();
        autoSaveSections();

        /* =======================
         *     Helper Functions
         * ======================= */

        // Generate a unique ID for a new section
        function generateId() {
            return '_' + Math.random().toString(36).substr(2, 9);
        }

        // Get the current week number
        function getCurrentWeekNumber() {
            const now = new Date();
            const startOfYear = new Date(now.getFullYear(), 0, 1);
            const days = Math.floor((now - startOfYear) / (24 * 60 * 60 * 1000));
            return Math.ceil((days + startOfYear.getDay() + 1) / 7);
        }

        // Escape HTML entities
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, m => map[m]);
        }

        // Auto-save: update the hidden input and log to console.
        // (You can choose to keep or remove auto-saving if you rely on manual Save)
        function autoSaveSections() {
            const jsonData = JSON.stringify(sectionsData);
            document.getElementById("SavedSections").value = jsonData;
            console.log("Auto-saved:", sectionsData);
        }

        /* =======================
         *    Rendering Functions
         * ======================= */

        // Render the top menu of sections (read-only titles, type badge, and delete icon)
        function renderMenu() {
            const menuContainer = document.getElementById("sectionsMenu");
            menuContainer.innerHTML = "";

            sectionsData.forEach(section => {
                // Determine background class based on whether HTML was generated
                const bgClass = section.htmlActive ? "bg-success" : "bg-secondary";

                // Main container for each section in the menu
                const menuItem = document.createElement("div");
                menuItem.className = `section-card d-flex align-items-center p-2 text-white ${bgClass} rounded ${section.id === selectedSectionId ? "active" : ""}`;
                menuItem.onclick = () => {
                    if (selectedSectionId !== section.id) {
                        selectedSectionId = section.id;
                        renderMenu();
                        renderSelectedSection();
                    }
                };

                // Title label (read-only in the menu)
                const titleLabel = document.createElement("span");
                titleLabel.className = "title-label";
                titleLabel.textContent = section.title;

                // Type badge indicating "Psalmen" or "Anders"
                const typeBadge = document.createElement("span");
                typeBadge.className = "badge ms-2 type-badge " +
                    (section.type === "psalmen" ? "bg-info" : "bg-warning");
                typeBadge.textContent = section.type === "psalmen" ? "Psalmen" : "Anders";

                // Delete button
                const removeBtn = document.createElement("button");
                removeBtn.type = "button";
                removeBtn.className = "btn btn-danger btn-sm ms-2";
                removeBtn.innerHTML = '<i class="bi bi-x"></i>';
                removeBtn.onclick = (e) => {
                    e.stopPropagation();
                    if (confirm(`Delete section '${section.title}'?`)) {
                        sectionsData = sectionsData.filter(sec => sec.id !== section.id);
                        if (selectedSectionId === section.id) {
                            selectedSectionId = sectionsData.length ? sectionsData[0].id : null;
                        }
                        renderMenu();
                        renderSelectedSection();
                        autoSaveSections();
                    }
                };

                menuItem.appendChild(titleLabel);
                menuItem.appendChild(typeBadge);
                menuItem.appendChild(removeBtn);
                menuContainer.appendChild(menuItem);
            });

            // "Add Section" button at the end
            const addSectionBtn = document.createElement("button");
            addSectionBtn.type = "button";
            addSectionBtn.className = "btn btn-primary d-flex align-items-center add-section-btn";
            addSectionBtn.innerHTML = '<i class="bi bi-plus"></i> Add Section';
            addSectionBtn.onclick = addSection;
            menuContainer.appendChild(addSectionBtn);
        }

        // Render the editing interface for the selected section
        function renderSelectedSection() {
            const container = document.getElementById("sectionContainer");
            container.innerHTML = "";

            const section = sectionsData.find(sec => sec.id === selectedSectionId);
            if (!section) {
                container.innerHTML = "<p>No section selected.</p>";
                return;
            }

            const sectionDiv = document.createElement("div");
            sectionDiv.className = "p-3 border bg-light rounded";

            // Editable Title
            const titleH5 = document.createElement("h5");

            // A span for the actual title text
            const titleSpan = document.createElement("span");
            titleSpan.className = "editable-title me-2";
            titleSpan.textContent = section.title;
            titleSpan.onclick = () => {
                titleSpan.contentEditable = "true";
                titleSpan.focus();
            };
            titleSpan.onblur = () => {
                section.title = titleSpan.innerText.trim();
                titleSpan.contentEditable = "false";
                autoSaveSections();
                renderMenu();
            };
            titleSpan.onkeydown = (e) => {
                if (e.key === "Enter") {
                    e.preventDefault();
                    titleSpan.blur();
                }
            };

            titleH5.appendChild(titleSpan);

            // Toggle type buttons (Psalmen / Anders) as a button group
            const toggleGroup = document.createElement("div");
            toggleGroup.className = "btn-group ms-3";

            const psalmenBtn = document.createElement("button");
            psalmenBtn.type = "button";
            psalmenBtn.textContent = "Psalmen";
            psalmenBtn.className = section.type === "psalmen" ? "btn btn-sm btn-primary" : "btn btn-sm btn-outline-secondary";
            psalmenBtn.onclick = () => {
                if (section.type !== "psalmen") {
                    // Convert anders content string to an array of lines
                    section.content = section.content.split("\n");
                    section.type = "psalmen";
                    autoSaveSections();
                    renderMenu();
                    renderSelectedSection();
                }
            };

            const andersBtn = document.createElement("button");
            andersBtn.type = "button";
            andersBtn.textContent = "Anders";
            andersBtn.className = section.type === "anders" ? "btn btn-sm btn-primary" : "btn btn-sm btn-outline-secondary";
            andersBtn.onclick = () => {
                if (section.type !== "anders") {
                    // Convert psalmen content array to a single string
                    section.content = section.content.join("\n");
                    section.type = "anders";
                    autoSaveSections();
                    renderMenu();
                    renderSelectedSection();
                }
            };

            toggleGroup.appendChild(psalmenBtn);
            toggleGroup.appendChild(andersBtn);
            titleH5.appendChild(toggleGroup);

            sectionDiv.appendChild(titleH5);

            // Render the main content area
            if (section.type === "psalmen") {
                // Multiple lines (array)
                const linesContainer = document.createElement("div");
                linesContainer.className = "mb-2";

                section.content.forEach((line, index) => {
                    const lineDiv = document.createElement("div");
                    lineDiv.className = "d-flex align-items-center mb-2";

                    const input = document.createElement("input");
                    input.type = "text";
                    input.value = line;
                    input.className = "form-control me-2";
                    input.onchange = () => {
                        section.content[index] = input.value;
                        autoSaveSections();
                    };

                    const removeBtn = document.createElement("button");
                    removeBtn.type = "button";
                    removeBtn.className = "btn btn-danger btn-sm";
                    removeBtn.innerHTML = '<i class="bi bi-x"></i>';
                    removeBtn.onclick = () => {
                        section.content.splice(index, 1);
                        renderSelectedSection();
                        autoSaveSections();
                    };

                    lineDiv.appendChild(input);
                    lineDiv.appendChild(removeBtn);
                    linesContainer.appendChild(lineDiv);
                });

                sectionDiv.appendChild(linesContainer);

                // Button to add a new line
                const addLineBtn = document.createElement("button");
                addLineBtn.type = "button";
                addLineBtn.className = "btn btn-primary";
                addLineBtn.innerHTML = '<i class="bi bi-plus"></i> Add Line';
                addLineBtn.onclick = () => {
                    section.content.push("");
                    renderSelectedSection();
                    autoSaveSections();
                };
                sectionDiv.appendChild(addLineBtn);

            } else {
                // "anders": single textarea
                const textarea = document.createElement("textarea");
                textarea.className = "form-control";
                textarea.value = section.content;
                textarea.onchange = () => {
                    section.content = textarea.value;
                    autoSaveSections();
                };
                sectionDiv.appendChild(textarea);
            }

            container.appendChild(sectionDiv);
        }

        /* =======================
         *    Action Functions
         * ======================= */

        // Add a new section with a default name "Week <currentWeekNumber>"
        function addSection() {
            const weekNumber = getCurrentWeekNumber();
            const newSection = {
                id: generateId(),
                title: "Week " + weekNumber,
                type: defaultType,
                content: (defaultType === "psalmen") ? [""] : "",
                htmlActive: false
            };
            sectionsData.push(newSection);
            selectedSectionId = newSection.id;
            renderMenu();
            renderSelectedSection();
            autoSaveSections();
        }

        function saveSections() {
            fetch('?handler=Save', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify(sectionsData),
                credentials: 'same-origin'
            })
            .then(r => r.json())
            .then(d => console.log(d.success ? 'Saved' : 'Save failed'))
            .catch(e => console.error('Fetch/save error:', e));
        }

        function generateHtml() {
            const sec = sectionsData.find(s => s.id === selectedSectionId);
            let output = '';
            if (sec.type === 'psalmen') {
                output = '<div class="psalmen-output">' +
                         sec.content.map(l => `<p>${escapeHtml(l)}</p>`).join('') +
                         '</div>';
            } else {
                output = `<div class="anders-output"><pre>${escapeHtml(sec.content)}</pre></div>`;
            }
            document.getElementById('generatedHtmlContainer').textContent = output;
            sectionsData.forEach(s => s.htmlActive = false);
            sec.htmlActive = true;
            renderMenu();

            fetch('?handler=GenerateHtml', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify({ generatedHtml: output }),
                credentials: 'same-origin'
            })
            .then(r => r.json())
            .then(d => console.log(d.success ? 'Generated' : 'Generate failed'))
            .catch(e => console.error('Fetch/Generate error:', e));
        }
    </script>
}
